# gomenhashai replicas count multiple replicas is supported for HA
replicas: 1

# Override Chart name in template
nameOverride:

# Override ReleaseName-ChartName in template
fullnameOverride:

# Cluster domain (used by cert-manager to generate certificate)
kubernetesClusterDomain: cluster.local

image:
  repository: ghcr.io/marcantoineraymond/gomenhashai
  # Image tag to use, default to appVersion
  tag:
  digest: "sha256:dd49884ab2514878fa12f18e059657ce39cda036457fcc09467dd39bcd1d4071"
  pullPolicy: IfNotPresent

# Mapping containing "image": "trusted digest"
digestsMapping:
  # Create the secret
  create: true
  # Name of the secret, if create is false secret must exist
  secretName:
  # Name of the key under which the mapping is stored in the secret
  secretKey: digests_mapping.yaml
  # YAML image mapping
  mapping:
#    "busybox:latest": "sha256:37f7b378a29ceb4c551b1b5582e27747b855bbfaa73fa11914fe0df028dc581f"
#    "busybox": "sha256:e246aa22ad2cbdfbd19e2a6ca2b275e26245a21920e2b2d0666324cee3f15549"
#    "library/busybox": "sha256:e246aa22ad2cbdfbd19e2a6ca2b275e26245a21920e2b2d0666324cee3f15549"
#    "docker.io/library/busybox": "sha256:e246aa22ad2cbdfbd19e2a6ca2b275e26245a21920e2b2d0666324cee3f15549"
#    "docker.io/library/busybox:stable": "sha256:e246aa22ad2cbdfbd19e2a6ca2b275e26245a21920e2b2d0666324cee3f15549"
#    "busybox:stable": "sha256:e246aa22ad2cbdfbd19e2a6ca2b275e26245a21920e2b2d0666324cee3f15549"
#    "nginx/nginx-ingress:5.0.0-alpine": "sha256:a6c4d7c7270f03a3abb1ff38973f5db98d8660832364561990c4d0ef8b1477af"
#    "curlimages/curl:8.13.0": "sha256:d43bdb28bae0be0998f3be83199bfb2b81e0a30b034b6d7586ce7e05de34c3fd"

# YAML configuration, see https://github.com/MarcAntoineRaymond/GomenHashai?tab=readme-ov-file#-configurations
config:
#  exemptions: []
#  ...

# Args passed to the manager app, override default args
args: []

annotations: {}

podAnnotations:
  kubectl.kubernetes.io/default-container: gomenhashai

extraLabels: {}

extraPodLabels: {}

# gomenhashai container security context
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  privileged: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true

# Pod security context
podSecurityContext:
  fsGroup: 2000
  runAsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

# gomenhashai resources configuration, see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits
resources:
  limits:
    cpu: "1"
    memory: 256Mi
  requests:
    cpu: 10m
    memory: 64Mi

# Configure Deployment liveness probe
livenessProbe:
  initialDelaySeconds: 5
  periodSeconds: 10
  port: 8081

# Configure Deployment readiness probe
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 10
  port: 8081

extraEnv: []

envFrom: []

sidecars: []

initContainers: []

extraVolumes: []

extraVolumeMounts: []

# Service account configuration
serviceAccount:
  # Create the service account, if false the service account must be provided
  create: true
  # Name of the service account, if create is false it must exists
  name:
  # Annotations to the service account if create is true
  annotations: {}
  # Extra Labels to the service account if create is true
  extraLabels: {}
  # Automount service account token in service account
  automountServiceAccountToken: true

# RBAC role and binding to the service account
rbac:
  # Create the RBAC
  create: true

# Certificates management configuration
# By default a self signed CA and required certificates are generated with Helm
# But this is not a recommended setup
# You should either enable cert-manager to create GomenHashai provided cert-manager certificates and issuer resources
# Or enable cert-manager, disable create and provide your own secret with cert-manager certificates
# You can also provide your own secrets with cert-manager disabled but you will need to to provide the CA for both webhook configurations and certificate rotation will have to be handled manually
certificates:
  # Certificates duration in days (for default self signed certificate)
  duration: 365
  # Cert manager configuration
  cert-manager:
    # Use cert-manager to inject CA in webhook configuration
    enabled: false
    # Deploy certificates resources for cert-manager (Only if cert-manager is enabled, disable creation if you provide your own certificates from a secret)
    create: true
    # Certificates duration in days
    duration: 365
    # When to renew certificates
    renewBefore: 360h
    # Only set issuer if you have your own issuer otherwise one will be created (if create is true)
    issuer:
  webhook:
    # Name of the secret containing webhook certificates (generated if empty)
    secretName:
  metrics:
    # Name of the secret containing metrics certificates (generated if empty)
    secretName:

metrics:
  # Enable exporting metrics with prometheus annotations
  enabled: true
  # Serve metrics with HTTPS and authn/authz and add TLS Config to Service Monitor if enabled
  secure: true
  serviceMonitor:
    # Enable exporting metrics with Prometheus Service Monitor INSTEAD OF annotations, require using Prometheus Operator
    enabled: false
    # Port to scrape on metrics service
    targetPort: 8443
    # Path exposing metrics
    path: /metrics
    # How frequently to scrape targets by default.
    interval: 60s
    # How long until a scrape request times out.
    scrapeTimeout: 10s
    # Overwrite Service Monitor TLS config, a default TLS config referencing certificates.metrcis.secretName is added when metrics.secure is true
    tlsConfig: {}
    # Extra properties to add to endpoint in ServiceMonitor resource
    endpointAdditionalProperties: {}
    # Custom annotations to add to ServiceMonitor
    annotations: {}
    # Extra labels to add to ServiceMonitor
    extraLabels: {}
  # Metrics service configuration
  service:
    annotations: {}
    extraLabels: {}
    port: 8443
    targetPort: 8443
    type: ClusterIP

webhook:
  # Mutating Webhook configuration
  mutating:
    # Enable mutation webhook
    enabled: true
    # Add labels: value to match namespace to exempt from mutation
    exemptNamespacesLabels:
    #  kubernetes.io/metadata.name:
    #    - "kube-system"
    #    - "cert-manager"
    # CA Bundle in PEM format to pass to the webhook, mandatory if not injected by cert-manager
    caBundle:
    annotations: {}
    extraLabels: {}
    failurePolicy: Fail
    matchPolicy: Exact
    reinvocationPolicy: Never
    objectSelector: {}
    sideEffects: None

  # Validating Webhook configuration
  validating:
    # Enable validation webhook
    enabled: true
    # Add labels: value to match namespace to exempt from validation
    exemptNamespacesLabels:
    #  kubernetes.io/metadata.name:
    #    - "kube-system"
    #    - "cert-manager"
    # CA Bundle in PEM format to pass to the webhook, mandatory if not injected by cert-manager
    caBundle:
    annotations: {}
    extraLabels: {}
    failurePolicy: Fail
    matchPolicy: Exact
    objectSelector: {}
    sideEffects: None

  # Webhook service configuration
  service:
    annotations: {}
    extraLabels: {}
    port: 443
    targetPort: 9443
    type: ClusterIP
