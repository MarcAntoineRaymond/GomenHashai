name: Go lint, test and gosec

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
  schedule:
    - cron: '30 3 * * 3'

permissions:
  contents: read
  pull-requests: read
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1

  test:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /src/tests/registry/auth:/auth
        env:
          REGISTRY_AUTH: htpasswd
          REGISTRY_AUTH_HTPASSWD_REALM: "Test Registry"
          REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
          REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
        options: --name registry --hostname registry

    steps:
      - uses: actions/checkout@v4
      - name: Copy auth file to registry
        run: |
          docker cp ${{ github.workspace }}/tests/registry/auth/htpasswd registry:/auth/
      - name: Restart services
        run: |
          TIMEOUT=10  # seconds
          START=$(date +%s)

          docker restart registry

          while true; do
            if curl -s --connect-timeout 1 http://localhost:5000/v2/ > /dev/null; then
              echo "Registry is ready."
              exit 0
            fi

            NOW=$(date +%s)
            if [ $((NOW - START)) -ge $TIMEOUT ]; then
              echo "Timeout: Registry did not become ready within $TIMEOUT seconds."
              exit 1
            fi

            sleep 1
          done

      - name: Login to local registry
        run: |
          echo "testpassword" | docker login localhost:5000 -u testuser --password-stdin

      - name: Install skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Copy test image to local registry via skopeo
        run: |
          skopeo copy \
            --all \
            --preserve-digests \
            docker://curlimages/curl@sha256:d43bdb28bae0be0998f3be83199bfb2b81e0a30b034b6d7586ce7e05de34c3fd \
            docker://localhost:5000/curlimages/curl \
            --dest-tls-verify=false

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  gosec:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run gosec
        uses: securego/gosec@master
        with:
          args: '-fmt=sarif -out=results.sarif ./...'

      - name: Upload SARIF results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
