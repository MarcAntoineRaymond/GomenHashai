name: Lint and Test Charts

on:
  push:
    branches: main
  pull_request:
    branches: main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'logo/**'
      - 'docs/**'

permissions:
  contents: read

env:
  CHART_NAME: gomenhashai
  CHART_DIR: deploy/charts/

jobs:
  kube-linter:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # This prepares directory where github/codeql-action/upload-sarif@v1 looks up report files by default.
      - name: Create ../results directory for SARIF report files
        shell: bash
        run: mkdir -p ../results

      - name: Scan yaml files with kube-linter
        uses: stackrox/kube-linter-action@87802a2f4e01abebb3ee3c67a3002fea71f6eae5 # v1.0.7
        id: kube-linter-action-scan
        with:
          # Adjust this directory to the location where your kubernetes resources and helm charts are located.
          directory: ${{ env.CHART_DIR }}
          # config: sample/.kube-linter-config.yaml
          # The following two settings make kube-linter produce scan analysis in SARIF format which would then be
          # made available in GitHub UI via upload-sarif action below.
          format: sarif
          output-file: ../results/kube-linter.sarif
        # The following line prevents aborting the workflow immediately in case your files fail kube-linter checks.
        # This allows the following upload-sarif action to still upload the results to your GitHub repo.
        continue-on-error: true

      - name: Upload SARIF report files to GitHub
        uses: github/codeql-action/upload-sarif@181d5eefc20863364f96762470ba6f862bdef56b # v3.29.2

      # Ensure the workflow eventually fails if files did not pass kube-linter checks.
      - name: Verify kube-linter-action succeeded
        shell: bash
        run: |
          echo "If this step fails, kube-linter found issues. Check the output of the scan step above."
          [[ "${{ steps.kube-linter-action-scan.outcome }}" == "success" ]]

  chart-test:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
        with:
          version: v3.17.0

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.x'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Run chart-testing (lint)
        run: ct lint --chart-dirs ${{ env.CHART_DIR }} --target-branch ${{ github.event.repository.default_branch }} --check-version-increment=false

      - name: Create kind cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0

      - name: Install Prometheus Operator
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm install kube-prometheus-stack -n prometheus prometheus-community/kube-prometheus-stack --create-namespace \
            --set alertmanager.enabled=false \
            --set grafana.enabled=false \
            --set kubeApiServer.enabled=false \
            --set kubelet.enabled=false \
            --set kubeControllerManager.enabled=false \
            --set coreDns.enabled=false \
            --set kubeEtcd.enabled=false \
            --set kubeScheduler.enabled=false \
            --set kubeProxy.enabled=false \
            --set kubeStateMetrics.enabled=false \
            --set nodeExporter.enabled=false

      - name: Install cert-manager
        run: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.17.0/cert-manager.yaml

      - name: Install cmctl
        run: |
          curl -L https://github.com/cert-manager/cmctl/releases/download/v2.1.1/cmctl_linux_amd64.tar.gz | tar xz
          sudo mv cmctl /usr/local/bin/

      - name: Wait for cert-manager webhook to be ready
        run: cmctl check api --wait=2m

      - name: Run test-not-delete pod
        run: kubectl run test-not-delete -n default --image=docker.io/library/busybox:stable

      - name: Run test-delete pod
        run: kubectl run test-delete -n default --image=test

      - name: Install and test Chart
        run: |
          helm install ${{ env.CHART_NAME }} ${{ env.CHART_DIR }}${{ env.CHART_NAME }} --create-namespace -n ${{ env.CHART_NAME }} --values tests/values.yaml
          if ! helm test ${{ env.CHART_NAME }} -n ${{ env.CHART_NAME }} ; then
            kubectl logs ${{ env.CHART_NAME }}-test -n ${{ env.CHART_NAME }}
            exit 1
          fi
      
      - name: Uninstall chart
        run: helm uninstall ${{ env.CHART_NAME }} -n ${{ env.CHART_NAME }}

      - name: Run test-delete pod
        run: kubectl run test-delete -n default --image=test

      - name: Install and test Chart (with cert-manager and serviceMonitor)
        run: |
          helm install ${{ env.CHART_NAME }} ${{ env.CHART_DIR }}${{ env.CHART_NAME }} --create-namespace -n ${{ env.CHART_NAME }} --values tests/values.yaml --set certificates.cert-manager.enabled=true --set metrics.serviceMonitor.enabled=true --set metrics.secure=true
          if ! helm test ${{ env.CHART_NAME }} -n ${{ env.CHART_NAME }} ; then
            kubectl logs ${{ env.CHART_NAME }}-test -n ${{ env.CHART_NAME }}
            exit 1
          fi