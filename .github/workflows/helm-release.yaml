name: Publish Helm Chart

on:
  push:
    branches:
      - main

permissions:  # added using https://github.com/step-security/secure-repo
  contents: read

jobs:
  release:
    permissions:
      contents: write
      id-token: write
      attestations: write
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        id: cr
        uses: helm/chart-releaser-action@cae68fefc6b5f367a0275617c9f83181ba54714f # v1.7.0
        with:
          charts_dir: deploy/charts
          skip_existing: true
          mark_as_latest: false
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Find Helm chart artifact in release
        id: find_release
        if: ${{ steps.cr.outputs.changed_charts != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="$(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]')-$(echo ${{ steps.cr.outputs.chart_version }} | cut -c 2-)"
          echo "Getting assets for release: $tag"
          chart_asset="${tag}.tgz"
          gh release download "$tag" --pattern "$chart_asset"
          echo "chart=$chart_asset" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        if: ${{ steps.cr.outputs.changed_charts != '' }}
        id: attest
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: ${{ steps.find_release.outputs.chart }}

      - name: Prepare sigstore and in-toto bundle
        if: ${{ steps.cr.outputs.changed_charts != '' }}
        id: prep_attestation
        env:
          BUNDLE: ${{ steps.attest.outputs.bundle-path }}
        run: |
          NAME="${{ runner.temp }}/${{ steps.find_release.outputs.tag }}"
          echo "name=$NAME" >> $GITHUB_OUTPUT
          mv "$BUNDLE" "${NAME}.sigstore"
          if ! jq -e '.dsseEnvelope' "${NAME}.sigstore" > /dev/null; then
            echo "❌ Error: No 'dsseEnvelope' found in ${NAME}.sigstore"
            exit 1
          fi

          jq -c '.dsseEnvelope' "${NAME}.sigstore" > "${NAME}.intoto.jsonl"
          echo "✅ Extracted dsseEnvelope to ${NAME}.intoto.jsonl"

      # Upload attestations
      - name: Upload attestations to release
        if: ${{ steps.cr.outputs.changed_charts != '' }}
        uses: svenstaro/upload-release-action@81c65b7cd4de9b2570615ce3aad67a41de5b1a13 # v2
        with:
          tag: ${{ steps.find_release.outputs.tag }}
          file: ${{ steps.prep_attestation.outputs.name }}.*
          file_glob: true
          make_latest: false
